name: Deploy to Amazon ECS - Develop

on:
    push:
        branches: [ "develop" ]

env:
    AWS_REGION: ap-northeast-2
    ECR_REPOSITORY: ddokliprp
    ECS_SERVICE: ddoklip-backservice
    ECS_CLUSTER: ddoklip
    ECS_TASK_DEFINITION: ./aws/task_definition.json
    CONTAINER_NAME: ddoklip-backend

permissions:
    contents: read

jobs:
    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        environment: production

        steps:
            -   name: Checkout
                uses: actions/checkout@v3

            -   name: Set up JDK 17
                uses: actions/setup-java@v3
                with:
                    java-version: '17'
                    distribution: 'temurin'

            -   name: Create application.yml
                run: |
                    mkdir -p ./src/main/resources
                    APPLICATION_YML_PATH=./src/main/resources/application.yml
                    echo "Writing application.yml"
                    echo "${{ secrets.APPLICATION_YML }}" > "$APPLICATION_YML_PATH"

            -   name: Build with Gradle
                run: |
                    chmod +x gradlew
                    ./gradlew bootJar

            -   name: Configure AWS credentials
                uses: aws-actions/configure-aws-credentials@v1
                with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    aws-region: ${{ env.AWS_REGION }}

            -   name: Login to Amazon ECR
                id: login-ecr
                uses: aws-actions/amazon-ecr-login@v1

            -   name: Build, tag, and push image to Amazon ECR
                id: build-image
                env:
                    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                    IMAGE_TAG: ${{ github.sha }}
                run: |
                    docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                    echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

            -   name: Fill in the new image ID in the Amazon ECS task definition
                id: task-def
                uses: aws-actions/amazon-ecs-render-task-definition@v1
                with:
                    task-definition: ${{ env.ECS_TASK_DEFINITION }}
                    container-name: ${{ env.CONTAINER_NAME }}
                    image: ${{ steps.build-image.outputs.image }}

            -   name: Deploy Amazon ECS task definition
                uses: aws-actions/amazon-ecs-deploy-task-definition@v1
                with:
                    task-definition: ${{ steps.task-def.outputs.task-definition }}
                    service: ${{ env.ECS_SERVICE }}
                    cluster: ${{ env.ECS_CLUSTER }}
                    wait-for-service-stability: true
